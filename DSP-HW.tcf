/**
 * @file DSP-HW.tcf
 * @author Atlanswer (atlanswer@gmail.com)
 * @brief DSP/BIOS configuration script.
 * @version 0.3
 * @date 2021-01-09
 * 
 * @copyright Copyright (c) 2021
 * 
 */

utils.loadPlatform("ti.platforms.sim64xx");

/*
 * The following DSP/BIOS Features are enabled.
 */

bios.enableRealTimeAnalysis(prog);
bios.enableMemoryHeaps(prog);
bios.RTDX.ENABLERTDX = true;
bios.TSK.ENABLETSK = true;

/*
 * Enable heaps in IRAM and define label SEG0 for heap usage.
 */

bios.IRAM.createHeap      = true;
bios.IRAM.enableHeapLabel = true;
bios.IRAM["heapLabel"]    = prog.extern("SEG0");
bios.IRAM.heapSize        = 0x2000;
bios.MEM.BIOSOBJSEG = prog.get("IRAM");
bios.MEM.MALLOCSEG = prog.get("IRAM");

/*
 * Define the RTDX mode
 */

bios.RTDX.MODE = "Simulator";

/*
 *  When using the ARM with DSP, the ARM will share Timer 1 with the DSP.
 *  The ARM needs to enable power to Timer 1, program the timer for "32-bit unchainded" mode
 *  and take it out of reset.  The BIOS CLK should be driven with Timer 1 and not reset
 *  the timer.
 *
 *  In most production ARM+DSP systems we recommend removing these 2
 *  lines and sharing Timer1 with the Arm.  This will free up Timer0 for use by the
 *  application.
 *
 *  The workaround below is used to make the DSP-side applications work "out of the box"
 *  without any need for coordination with the ARM OS.
 */

bios.CLK.TIMERSELECT = "Timer 0";      /* Select Timer 0 to drive BIOS CLK */
bios.CLK.MICROSECONDS = 1000;

/*
 * Create and initialize LOG objects
 */

// Log random characters
var randCharLog     = bios.LOG.create("randCharLog");
randCharLog.bufLen  = 256;
randCharLog.logType = "circular";

// Log counter
var ctrLog      = bios.LOG.create("ctrLog");
ctrLog.bufLen   = 128;
ctrLog.logType  = "circular";

/*
 * Set the buffer length of LOG_system buffer
 */

bios.LOG_system.bufLen = 512;

/*
 * Create and initialize task manager
 */

var rdrRandChar         = bios.TSK.create("rdrRandChar");
rdrRandChar.fxn         = prog.extern("readRandChar");
rdrRandChar.priority    = 1;

var wtrRandChar         = bios.TSK.create("wtrRandChar");
wtrRandChar.fxn         = prog.extern("genRandChar");
wtrRandChar.priority    = 1;

/*
 * Create a mailbox manager
 */

var mbx         = bios.MBX.create("mbx");
mbx.messageSize = 16;
mbx.length      = 1;

/*
 * Create a random number software generator driver
 */

var DGN_rand        = bios.DGN.create("DGN_rand");
DGN_rand.device     = "random";
// My ID as random number generator's seed
DGN_rand.seedValue  = 17309115;
DGN_rand.lowerLimit = "A".charCodeAt();
DGN_rand.upperLimit = "A".charCodeAt() + 51;

/*
 * Create a stream i/o manager
 */

var SIO_rand        = bios.SIO.create("SIO_rand");
SIO_rand.deviceName = prog.get("DGN_rand");
SIO_rand.mode       = "input";
SIO_rand.bufSize    = 8;

/*
 * Create a periodic function manager
 */

bios.PRD.USECLK = true;
var prdCtr = bios.PRD.create("prdCtr");
prdCtr.period = 1000;
prdCtr.mode = "continuous";
prdCtr.fxn = prog.extern("incLogCounter");
prdCtr.order = 1;

// !GRAPHICAL_CONFIG_TOOL_SCRIPT_INSERT_POINT!

if (config.hasReportedError == false) {
    prog.gen();
}
